# trader.py
import base64
import logging
import json
import os
import time
from solana.rpc.api import Client
from solana.rpc.commitment import Confirmed
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.transaction import Transaction
import base58
import requests
from wallet_manager import WalletManager
from filters import check_liquidity_and_sellability, is_potential_scam
from solana_utils import get_sol_usdt_price, get_token_price_usdt, get_token_metadata, get_jupiter_swap_transaction
from aiogram import Bot
import asyncio
from datetime import datetime, timezone

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
SOLANA_RPC_URL = "https://api.mainnet-beta.solana.com"
PURCHASED_TOKENS_DIR = 'data/purchased_tokens'
# URL Jupiter API —Ç–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
JUPITER_QUOTE_URL = "https://quote-api.jup.ag/v6/quote"
JUPITER_SWAP_URL = "https://quote-api.jup.ag/v6/swap"

def get_user_config(user_id: int, wallet_name: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    wm = WalletManager()
    return wm.get_wallet_config(user_id, wallet_name)

async def get_token_current_price(token_address: str) -> float:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ –≤ USDT —á–µ—Ä–µ–∑ DexScreener API
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DexScreener API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        url = f"https://api.dexscreener.com/tokens/v1/solana/{token_address}"
        response = requests.get(url, timeout=10)

        if response.status_code == 200:
            data = response.json()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ data —Å–ø–∏—Å–∫–æ–º
            if isinstance(data, list):
                pairs = data
            elif isinstance(data, dict) and "pairs" in data:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
                pairs = data["pairs"]
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç DexScreener –¥–ª—è {token_address}: {type(data)}")
                pairs = []

            # –ò—â–µ–º –ø–∞—Ä—É —Å SOL –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–≤–æ—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            for pair in pairs:
                quote_token = pair.get("quoteToken", {})
                if quote_token.get("symbol", "").upper() == "SOL":
                    price_usd = pair.get("priceUsd", "0")
                    try:
                        return float(price_usd)
                    except (TypeError, ValueError):
                        continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ä—É —Å SOL, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —á–µ—Ä–µ–∑ Jupiter (–∏–ª–∏ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é)
            # get_token_price_usdt –∏–∑ solana_utils.py —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DexScreener, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.
            # –õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å 0.0 –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ SOL –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address} —á–µ—Ä–µ–∑ DexScreener. –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥.")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ solana_utils
            return get_token_price_usdt(token_address)

        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address} —á–µ—Ä–µ–∑ DexScreener. Status: {response.status_code}")
        return 0.0
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {token_address}: {e}")
        return 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {token_address}: {e}")
        return 0.0

async def get_purchased_tokens_info(user_id: int, wallet_name: str) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏ –ø—Ä–æ—Ñ–∏—Ç–æ–º
    """
    purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
    tokens_info = []

    if not os.path.exists(purchased_tokens_file):
        return tokens_info

    try:
        with open(purchased_tokens_file, 'r') as f:
            purchased_tokens = json.load(f)

        for token_address, token_data in purchased_tokens.items():
            current_price = await get_token_current_price(token_address)

            if current_price <= 0:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "N/A" –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Ü–µ–Ω—ã
                # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
                continue

            # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ ---
            # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ 'purchase_price_usdt'
            purchase_price = token_data.get('purchase_price_usdt', 0)

            if purchase_price <= 0:
                logger.warning(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {purchase_price}")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç
            profit_percent = ((current_price - purchase_price) / purchase_price) * 100 if purchase_price > 0 else 0
            multiplier = current_price / purchase_price if purchase_price > 0 else 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = "üî¥" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if multiplier >= 4:
                status = "üü¢ x4+ (–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
            elif multiplier >= 3:
                status = "üü¢ x3+ (–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
            elif multiplier >= 2:
                status = "üü¢ x2+ (–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
            elif multiplier >= 1.5:
                status = "üü° x1.5"
            elif multiplier >= 1.2:
                status = "üü° x1.2"
            elif multiplier >= 1.1:
                status = "üü° x1.1"
            elif multiplier > 1.0:
                status = "üü° >1.0"
            elif multiplier == 1.0:
                status = "‚ö™ 1.0"
            else: # multiplier < 1.0
                status = "üî¥ <1.0"

            tokens_info.append({
                "address": token_address,
                "name": token_data.get('name', 'Unknown'),
                "symbol": token_data.get('symbol', 'UNKNOWN'),
                "purchase_price": purchase_price,
                "current_price": current_price,
                "profit_percent": profit_percent,
                "multiplier": multiplier,
                "status": status,
                # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ ---
                # –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–Ω–∞ —Ü–µ–ª—å
                "target_price": token_data.get('target_price_usdt', 0),
                "tx_signature": token_data.get('tx_signature', '')
            })

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {purchased_tokens_file}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ {purchased_tokens_file}: {e}")

    return tokens_info

async def buy_token(user_id: int, wallet_name: str, token_address: str, bot: Bot):
    """–ü–æ–∫—É–ø–∞–µ—Ç —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã."""
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}")
    wm = WalletManager()
    # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω–∏/—Å–∏–º–≤–æ–ª–∞
    token_metadata = get_token_metadata(token_address)
    token_name = token_metadata.get('name', 'Unknown')
    token_symbol = token_metadata.get('symbol', 'UNKNOWN')
    # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if is_potential_scam(token_address, token_name, token_symbol):
        logger.warning(f"–¢–æ–∫–µ–Ω {token_address} ({token_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –¢–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∫–∞–º).",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—à–µ–ª—å–∫–∞
    wallet_config = wm.get_wallet_config(user_id, wallet_name)
    if not wallet_config:
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞ ---
    trade_percentage = wallet_config.get('trade_percentage', 1.0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%
    if trade_percentage <= 0 or trade_percentage > 100:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name}: {trade_percentage}%")
        return False

    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
    private_key_b58 = wm.get_wallet_private_key(user_id, wallet_name)
    wallet_address = wm.get_wallet_address(user_id, wallet_name)
    if not private_key_b58 or not wallet_address:
        logger.error(f"–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return False
    try:
        keypair = Keypair.from_bytes(base58.b58decode(private_key_b58))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è {wallet_name}: {e}")
        return False

    # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –≤ USDT
    current_price_usdt = await get_token_current_price(token_address)
    if current_price_usdt <= 0:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ {token_address} –≤ USDT.")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—à–∏–±–∫–µ —Ü–µ–Ω—ã: {e}")
        return False

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞ ---
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    wallet_balance_sol = wm.get_wallet_balance_solana(wallet_address)
    if wallet_balance_sol <= 0:
        logger.error(f"–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} ({wallet_address}) –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω.")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—à–∏–±–∫–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É SOL –≤ USDT
    sol_price_usdt = get_sol_usdt_price()
    if sol_price_usdt <= 0:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É SOL –≤ USDT.")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É SOL –≤ USDT.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—à–∏–±–∫–µ —Ü–µ–Ω—ã SOL: {e}")
        return False

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –≤ SOL
    wallet_balance_usdt = wallet_balance_sol * sol_price_usdt
    purchase_amount_usdt = wallet_balance_usdt * (trade_percentage / 100.0)
    purchase_amount_sol = purchase_amount_usdt / sol_price_usdt

    logger.info(f"–ö–æ—à–µ–ª–µ–∫ {wallet_name}: –ë–∞–ª–∞–Ω—Å {wallet_balance_sol:.6f} SOL ({wallet_balance_usdt:.6f} USDT). "
                f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {trade_percentage}% = {purchase_amount_sol:.6f} SOL ({purchase_amount_usdt:.6f} USDT).")

    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ Jupiter
    try:
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ lamports ---
        sol_to_spend_lamports = int(purchase_amount_sol * 1_000_000_000) # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ lamports

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–±–º–µ–Ω–∞ SOL -> –¢–æ–∫–µ–Ω
        swap_transaction = get_jupiter_swap_transaction(
            input_mint="So11111111111111111111111111111111111111112",  # SOL
            output_mint=token_address,
            amount=sol_to_spend_lamports, # –ü–µ—Ä–µ–¥–∞–µ–º –≤ lamports
            slippage=100,  # –£–≤–µ–ª–∏—á–µ–Ω –¥–æ 1% –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            user_public_key=wallet_address
        )
        if not swap_transaction:
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}. " \
                        f"–í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –Ω–æ–≤—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å."
            logger.warning(error_msg)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    user_id,
                     f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –Ω–µ —É–¥–∞–ª–∞—Å—å.\n"
                     f"–ü—Ä–∏—á–∏–Ω–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –Ω–æ–≤—ã–π).",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–∫—É–ø–∫–µ: {e}")
            return False

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—ã—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ base64
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å base64
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ buy_token, –∑–∞–º–µ–Ω–∏—Ç–µ –±–ª–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—ã—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ base64
        # –í —Ñ—É–Ω–∫—Ü–∏–∏ buy_token, –∑–∞–º–µ–Ω–∏—Ç–µ –±–ª–æ–∫ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—ã—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ base64
        try:
            tx_data = swap_transaction['tx'].strip()
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ base64 –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            missing_padding = len(tx_data) % 4
            if missing_padding:
                tx_data += '=' * (4 - missing_padding)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π base64
            import base64
            try:
                raw_txn = base64.b64decode(tx_data)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª–∏–Ω–æ–π {len(raw_txn)} –±–∞–π—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                try:
                    raw_txn = base64.b64decode(tx_data.encode('utf-8'))
                except Exception as e2:
                    logger.error(f"–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—É–¥–∞—á–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–µ–∑–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å padding
                    tx_cleaned = tx_data.replace('\n', '').replace(' ', '')
                    missing_pad = len(tx_cleaned) % 4
                    if missing_pad:
                        tx_cleaned += '=' * (4 - missing_pad)
                    try:
                        raw_txn = base64.b64decode(tx_cleaned)
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª–∏–Ω–æ–π {len(raw_txn)} –±–∞–π—Ç")
                    except Exception as e3:
                        logger.error(f"–¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e3}")
                        raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–π—Ç–æ–≤
        transaction = Transaction.from_bytes(raw_txn)
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–≤–æ–∏–º –∫–ª—é—á–æ–º
        transaction.sign([keypair])
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        raw_signed_txn = bytes(transaction)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        client = Client(SOLANA_RPC_URL)
        tx_sig = client.send_raw_transaction(raw_signed_txn)
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_sig}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        client.confirm_transaction(tx_sig, commitment=Confirmed)
        logger.info(f"–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–µ
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ ---
        profit_percentage = wallet_config.get('profit_percentage', 100.0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100% (x2)
        multiplier_for_target = 1 + (profit_percentage / 100.0)
        target_price_usdt = current_price_usdt * multiplier_for_target

        purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
        purchased_tokens = {}
        if os.path.exists(purchased_tokens_file):
            try:
                with open(purchased_tokens_file, 'r') as f:
                    purchased_tokens = json.load(f)
            except json.JSONDecodeError:
                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {purchased_tokens_file}, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")

        # --- –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏ ---
        purchased_tokens[token_address] = {
            "name": token_name,
            "symbol": token_symbol,
            "purchase_price_usdt": current_price_usdt, # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ = —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            "current_price_usdt": current_price_usdt,
            "target_price_usdt": target_price_usdt, # –ù–æ–≤–∞—è —Ü–µ–ª—å
            "profit_percentage_target": profit_percentage, # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            "purchase_amount_usdt": purchase_amount_usdt, # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
            "purchase_time": str(time.time()),
            "tx_signature": str(tx_sig)
        }

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(purchased_tokens_file), exist_ok=True)
        with open(purchased_tokens_file, 'w') as f:
            json.dump(purchased_tokens, f, indent=2)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–∫–µ–Ω <b>{token_name} ({token_symbol})</b>\n"
                f"üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>{current_price_usdt:.6f} USDT</b>\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{purchase_amount_usdt:.6f} USDT</b> ({trade_percentage}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)\n"
                f"üéØ –¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏: <b>{target_price_usdt:.6f} USDT</b> (+{profit_percentage}% / x{multiplier_for_target:.2f})",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}: {e}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_address}:\n{str(e)}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def check_and_sell_tokens(user_id: int, wallet_name: str, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø—Ä–æ–¥–∞–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã —Ü–µ–ª–∏."""
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {user_id}/{wallet_name}")
    purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
    if not os.path.exists(purchased_tokens_file):
        logger.info(f"–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id}/{wallet_name}")
        return
    try:
        with open(purchased_tokens_file, 'r') as f:
            purchased_tokens = json.load(f)
        updated_tokens = {}
        sold_any = False
        for token_address, token_data in purchased_tokens.items():
            current_price_usdt = await get_token_current_price(token_address)
            if current_price_usdt <= 0:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ {token_address}. –ü—Ä–æ–ø—É—Å–∫.")
                updated_tokens[token_address] = token_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                continue
            # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –∏ —Ü–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏ ---
            purchase_price = token_data.get('purchase_price_usdt', 0)
            target_price = token_data.get('target_price_usdt', 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –≤ —Ñ–∞–π–ª–µ
            token_data['current_price_usdt'] = current_price_usdt
            updated_tokens[token_address] = token_data

            # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ ---
            if current_price_usdt >= target_price and target_price > 0:
                logger.info(f"–¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–ª—è {token_address} ({current_price_usdt} >= {target_price}). –ü—Ä–æ–¥–∞–∂–∞...")
                sold = await sell_token(user_id, wallet_name, token_address, bot)
                if sold:
                    sold_any = True
                    # –¢–æ–∫–µ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ updated_tokens, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–æ–¥–∞–Ω
                else:
                    # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–∫–µ
                    updated_tokens[token_address] = token_data
            # else:
                # logger.debug(f"–¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–ª—è {token_address}. –¢–µ–∫—É—â–∞—è: {current_price_usdt}, –¶–µ–ª—å: {target_price}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–±–µ–∑ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
        if sold_any:
            with open(purchased_tokens_file, 'w') as f:
                json.dump(updated_tokens, f, indent=2)
            logger.info(f"–°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id}/{wallet_name} –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {purchased_tokens_file}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {user_id}/{wallet_name}: {e}")

async def sell_token(user_id: int, wallet_name: str, token_address: str, bot: Bot) -> bool:
    """–ü—Ä–æ–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Jupiter API"""
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}")
    wm = WalletManager()
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
    private_key_b58 = wm.get_wallet_private_key(user_id, wallet_name)
    wallet_address = wm.get_wallet_address(user_id, wallet_name)
    if not private_key_b58 or not wallet_address:
        logger.error(f"–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return False
    try:
        keypair = Keypair.from_bytes(base58.b58decode(private_key_b58))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è {wallet_name}: {e}")
        return False
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
        current_price = await get_token_current_price(token_address)
        if current_price <= 0:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
             return False
        # --- TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. ---
        # –ü–æ–∫–∞ —á—Ç–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 (–≤ smallest units). –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞.
        # –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RPC –≤—ã–∑–æ–≤ getTokenAccountsByOwner –∏–ª–∏ –∞–Ω–∞–ª–æ–≥ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
        # –ü—Ä–∏–º–µ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫):
        # from solana.rpc.types import TokenAccountOpts
        # token_accounts = client.get_token_accounts_by_owner(Pubkey.from_string(wallet_address), TokenAccountOpts(mint=Pubkey.from_string(token_address)))
        # if token_accounts.value:
        #     # –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–∑ token_accounts.value[0].account.data.parsed['info']['tokenAmount']['amount']
        #     token_balance_smallest_unit = int(token_accounts.value[0].account.data.parsed['info']['tokenAmount']['amount'])
        # else:
        #     token_balance_smallest_unit = 0
        # amount_to_sell = token_balance_smallest_unit

        # –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 100% –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω)
        # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 lamport –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫.
        # amount_to_sell_smallest_unit = 1 # –≠—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–æ–¥–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        token_name = "Unknown"
        token_symbol = "UNKNOWN"
        purchase_price = 0.0
        purchase_amount = 0.0
        profit_percent_target = 0.0
        actual_profit_percent = 0.0

        purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
        if os.path.exists(purchased_tokens_file):
            try:
                with open(purchased_tokens_file, 'r') as f:
                    purchased_tokens = json.load(f)
                token_data = purchased_tokens.get(token_address, {})
                token_name = token_data.get('name', 'Unknown')
                token_symbol = token_data.get('symbol', 'UNKNOWN')
                purchase_price = token_data.get('purchase_price_usdt', 0)
                purchase_amount = token_data.get('purchase_amount_usdt', 0)
                profit_percent_target = token_data.get('profit_percentage_target', 100.0)
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–∏–±—ã–ª—å
                if purchase_price > 0:
                    actual_profit_percent = ((current_price - purchase_price) / purchase_price) * 100
                else:
                    actual_profit_percent = 0.0
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {purchased_tokens_file} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
        try:
            await bot.send_message(
                user_id,
                f"‚ö†Ô∏è –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞, "
                f"–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –∫–æ–¥–µ.\n"
                f"üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>{purchase_price:.6f} USDT</b>\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:.6f} USDT</b>\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{purchase_amount:.6f} USDT</b>\n"
                f"üéØ –¶–µ–ª—å –±—ã–ª–∞: +{profit_percent_target}%\n"
                f"üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–±—ã–ª—å: <b>{actual_profit_percent:.2f}%</b>\n"
                f"üõ†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞
        return False

        # --- –ù–∏–∂–µ –∏–¥–µ—Ç –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ ---
        # swap_transaction = get_jupiter_swap_transaction(
        #     input_mint=token_address,
        #     output_mint="So11111111111111111111111111111111111111112",  # SOL
        #     amount=amount_to_sell_smallest_unit,  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
        #     slippage=100,  # 1%
        #     user_public_key=wallet_address
        # )
        # if not swap_transaction:
        #     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é swap –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {token_address}")
        #     return False
        # # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—ã—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ base64
        # raw_txn = base64.b64decode(swap_transaction['tx'])
        # # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –±–∞–π—Ç–æ–≤
        # transaction = Transaction.from_bytes(raw_txn)
        # # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–≤–æ–∏–º –∫–ª—é—á–æ–º
        # transaction.sign([keypair])
        # # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        # raw_signed_txn = bytes(transaction)
        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        # client = Client(SOLANA_RPC_URL)
        # tx_sig = client.send_raw_transaction(raw_signed_txn)
        # logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_sig}")
        # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        # client.confirm_transaction(tx_sig, commitment=Confirmed)
        # logger.info(f"–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        # # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π) ...
        # return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}: {e}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ {token_address}:\n{str(e)}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False
