import base64
import logging
import json
import os
import time
import re
import asyncio
import base58
import requests
from solana.rpc.api import Client
from solana.rpc.commitment import Confirmed
from solana.rpc.types import TokenAccountOpts
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.transaction import VersionedTransaction
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from wallet_manager import WalletManager
from filters import check_liquidity_and_sellability, is_potential_scam, send_token_analysis_to_group
from solana_utils import get_sol_usdt_price, get_token_price_usdt, get_token_metadata
from aiogram import Bot

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
GROUP_CHAT_ID = "-1003071618300"
TOPIC_MESSAGE_THREAD_ID = 61
SOLANA_RPC_URL = "https://api.mainnet-beta.solana.com"
PURCHASED_TOKENS_DIR = 'data/purchased_tokens'
JUPITER_QUOTE_URL = "https://quote-api.jup.ag/v6/quote"
JUPITER_SWAP_URL = "https://lite-api.jup.ag/swap/v1/swap"
url_pay = "https://t.me/KosmoNavt001"

def get_user_config(user_id: int, wallet_name: str) -> dict:
    wm = WalletManager()
    return wm.get_wallet_config(user_id, wallet_name)

async def get_token_current_price(token_address: str) -> float:
    try:
        url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        response = requests.get(url, timeout=10)

        if response.status_code == 200:
            data = response.json()
            if isinstance(data, list):
                pairs = data
            elif isinstance(data, dict) and "pairs" in data:
                pairs = data["pairs"]
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç DexScreener –¥–ª—è {token_address}: {type(data)}")
                pairs = []

            for pair in pairs:
                quote_token = pair.get("quoteToken", {})
                if quote_token.get("symbol", "").upper() == "SOL":
                    price_usd = pair.get("priceUsd", "0")
                    try:
                        return float(price_usd)
                    except (TypeError, ValueError):
                        continue

            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ SOL –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address} —á–µ—Ä–µ–∑ DexScreener.")
            return get_token_price_usdt(token_address)

        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address} —á–µ—Ä–µ–∑ DexScreener. Status: {response.status_code}")
        return 0.0
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {token_address}: {e}")
        return 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {token_address}: {e}")
        return 0.0

async def get_purchased_tokens_info(user_id: int, wallet_name: str) -> list:
    purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
    tokens_info = []

    if not os.path.exists(purchased_tokens_file):
        return tokens_info

    try:
        with open(purchased_tokens_file, 'r') as f:
            purchased_tokens = json.load(f)

        for token_address, token_data in purchased_tokens.items():
            current_price = await get_token_current_price(token_address)

            if current_price <= 0:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}")
                continue

            purchase_price = token_data.get('purchase_price_usdt', 0)

            if purchase_price <= 0:
                logger.warning(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {purchase_price}")
                continue

            profit_percent = ((current_price - purchase_price) / purchase_price) * 100 if purchase_price > 0 else 0
            multiplier = current_price / purchase_price if purchase_price > 0 else 0

            status = "üî¥"
            if multiplier >= 4:
                status = "üü¢ x4+ (–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
            elif multiplier >= 3:
                status = "üü¢ x3+ (–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
            elif multiplier >= 2:
                status = "üü¢ x2+ (–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞)"
            elif multiplier >= 1.5:
                status = "üü° x1.5"
            elif multiplier >= 1.2:
                status = "üü° x1.2"
            elif multiplier >= 1.1:
                status = "üü° x1.1"
            elif multiplier > 1.0:
                status = "üü° >1.0"
            elif multiplier == 1.0:
                status = "‚ö™ 1.0"
            else:
                status = "üî¥ <1.0"

            tokens_info.append({
                "address": token_address,
                "name": token_data.get('name', 'Unknown'),
                "symbol": token_data.get('symbol', 'UNKNOWN'),
                "purchase_price": purchase_price,
                "current_price": current_price,
                "profit_percent": profit_percent,
                "multiplier": multiplier,
                "status": status,
                "target_price": token_data.get('target_price_usdt', 0),
                "tx_signature": token_data.get('tx_signature', '')
            })

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {purchased_tokens_file}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ {purchased_tokens_file}: {e}")

    return tokens_info

def decode_jupiter_transaction(tx_data: str) -> bytes:
    try:
        cleaned_data = tx_data.strip().replace('\n', '').replace(' ', '').replace('=', '')
        
        padding = len(cleaned_data) % 4
        if padding:
            cleaned_data += '=' * (4 - padding)
        
        decoded = base64.b64decode(cleaned_data)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        return decoded
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        try:
            base64_pattern = r'[A-Za-z0-9+/]+={0,2}'
            matches = re.findall(base64_pattern, tx_data)
            if matches:
                cleaned = ''.join(matches)
                padding = len(cleaned) % 4
                if padding:
                    cleaned += '=' * (4 - padding)
                return base64.b64decode(cleaned)
            raise ValueError("No valid base64 found in transaction data")
        except Exception as e2:
            logger.error(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {e2}")
            raise

def get_jupiter_swap_transaction_improved(input_mint: str, output_mint: str, amount: int,
                                        slippage: int, user_public_key: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç base64-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–≤–æ–ø–∞ —á–µ—Ä–µ–∑ Jupiter Swap API.
    """
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º quote
        quote_url = f"{JUPITER_QUOTE_URL}?inputMint={input_mint}&outputMint={output_mint}&amount={amount}&slippageBps={slippage}"
        quote_response = requests.get(quote_url, timeout=10)

        if quote_response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è quote: {quote_response.status_code}")
            return None

        quote_data = quote_response.json()

        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤–æ–ø–∞
        swap_payload = {
            "userPublicKey": user_public_key,
            "quoteResponse": quote_data,
            "wrapAndUnwrapSol": True,
            "dynamicComputeUnitLimit": True,
            "useSharedAccounts": False,
        }

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        }
        swap_response = requests.post(JUPITER_SWAP_URL, json=swap_payload, headers=headers, timeout=10)

        if swap_response.status_code != 200:
            # –ü—Ä–æ–±—É–µ–º —Å useSharedAccounts=True –∫–∞–∫ fallback
            swap_payload["useSharedAccounts"] = True
            swap_response = requests.post(JUPITER_SWAP_URL, json=swap_payload, headers=headers, timeout=10)

        if swap_response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {swap_response.status_code}")
            logger.error(f"Response: {swap_response.text}")
            return None

        return swap_response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { "swapTransaction": "...", ... }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤–æ–ø–∞: {e}")
        return None
       
def get_jupiter_swap_transaction(input_mint: str, output_mint: str, amount: int, 
                               slippage: int, user_public_key: str) -> dict:
    return get_jupiter_swap_transaction_improved(input_mint, output_mint, amount, 
                                               slippage, user_public_key)

async def buy_token(user_id: int, wallet_name: str, token_address: str, bot: Bot):
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}")
    wm = WalletManager()

    token_metadata = get_token_metadata(token_address)
    token_name = token_metadata.get('name', 'Unknown')
    token_symbol = token_metadata.get('symbol', 'UNKNOWN')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –≥—Ä—É–ø–ø—É
    try:
        await send_token_analysis_to_group(bot, token_address)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –≤ –≥—Ä—É–ø–ø—É: {e}")

    if is_potential_scam(token_address, token_name, token_symbol):
        logger.warning(f"–¢–æ–∫–µ–Ω {token_address} ({token_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.")
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: –¢–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∫–∞–º).",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

    wallet_config = wm.get_wallet_config(user_id, wallet_name)
    if not wallet_config:
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return False

    trade_percentage = wallet_config.get('trade_percentage', 1.0)
    if trade_percentage <= 0 or trade_percentage > 100:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name}: {trade_percentage}%")
        return False

    private_key_b58 = wm.get_wallet_private_key(user_id, wallet_name)
    wallet_address = wm.get_wallet_address(user_id, wallet_name)
    if not private_key_b58 or not wallet_address:
        logger.error(f"–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return False

    try:
        keypair = Keypair.from_bytes(base58.b58decode(private_key_b58))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è {wallet_name}: {e}")
        return False

    try:
        # --- –ï–î–ò–ù–´–ô –ë–õ–û–ö –†–ê–°–ß–ï–¢–û–í ---
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É SOL –≤ USDT
        sol_price_usdt = get_sol_usdt_price()
        if sol_price_usdt <= 0:
            raise Exception("Failed to get SOL price")

        # 2. –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        wallet_balance_sol = wm.get_wallet_balance_solana(wallet_address)
        if wallet_balance_sol <= 0:
            raise Exception("Failed to get wallet balance")

        # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
        current_price_usdt = await get_token_current_price(token_address)
        if current_price_usdt <= 0:
            raise Exception("Failed to get token price")

        # 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
        wallet_balance_usdt = wallet_balance_sol * sol_price_usdt
        purchase_amount_usdt = wallet_balance_usdt * (trade_percentage / 100.0)
        purchase_amount_sol = purchase_amount_usdt / sol_price_usdt

        # 5. –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
        logger.info(f"–ö–æ—à–µ–ª–µ–∫ {wallet_name}: –ë–∞–ª–∞–Ω—Å {wallet_balance_sol:.6f} SOL ({wallet_balance_usdt:.6f} USDT). "
                    f"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ {trade_percentage}% = {purchase_amount_sol:.6f} SOL ({purchase_amount_usdt:.6f} USDT).")

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ (–≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ ATA)
        ATA_CREATION_COST_SOL = 0.00203928
        MINIMUM_GAS_FOR_FUTURE_TX = 0.00001
        TOTAL_REQUIRED_SOL = purchase_amount_sol + ATA_CREATION_COST_SOL + MINIMUM_GAS_FOR_FUTURE_TX

        if wallet_balance_sol < TOTAL_REQUIRED_SOL:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è {TOTAL_REQUIRED_SOL:.6f} SOL, –¥–æ—Å—Ç—É–ø–Ω–æ {wallet_balance_sol:.6f} SOL")
            
            deposit_url = "https://jup.ag/swap/SOL-USDC"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", url=deposit_url)]
            ])
            
            await bot.send_message(
                user_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω <b>{token_name} ({token_symbol})</b>.\n\n"
                f"üìä –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: <b>{wallet_balance_sol:.6f} SOL</b>\n"
                f"üí∏ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: <b>{TOTAL_REQUIRED_SOL:.6f} SOL</b>\n"
                f"üìâ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{TOTAL_REQUIRED_SOL - wallet_balance_sol:.6f} SOL</b>\n\n"
                f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–∞—Ç–∞), "
                f"—á—Ç–æ —Å—Ç–æ–∏—Ç ~0.00204 SOL.",
                parse_mode="HTML",
                reply_markup=keyboard
            )
            return False

        # --- –ü–†–û–î–û–õ–ñ–ê–ï–ú –° –ü–û–ö–£–ü–ö–û–ô ---
        sol_to_spend_lamports = int(purchase_amount_sol * 1_000_000_000)

        swap_transaction = get_jupiter_swap_transaction_improved(
            input_mint="So11111111111111111111111111111111111111112",
            output_mint=token_address,
            amount=sol_to_spend_lamports,
            slippage=100,
            user_public_key=wallet_address
        )

        if not swap_transaction:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {token_address}.")
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –Ω–µ —É–¥–∞–ª–∞—Å—å.\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_base64 = swap_transaction['swapTransaction']
        raw_txn = base64.b64decode(transaction_base64)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ base64, –¥–ª–∏–Ω–∞: {len(raw_txn)} –±–∞–π—Ç")

        transaction = VersionedTransaction.from_bytes(raw_txn)
        logger.info("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ VersionedTransaction –∏–∑ –±–∞–π—Ç–æ–≤")

        signed_tx = VersionedTransaction(transaction.message, [keypair])
        raw_signed_txn = bytes(signed_tx)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if len(raw_signed_txn) > 1232:
            logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è: {len(raw_signed_txn)} –±–∞–π—Ç")
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è.\n"
                    f"–†–∞–∑–º–µ—Ä: {len(raw_signed_txn)} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º 1232 –±–∞–π—Ç–∞).",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        client = Client(SOLANA_RPC_URL)
        tx_sig = client.send_raw_transaction(raw_signed_txn)
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_sig}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        start_time = time.time()
        timeout = 30
        while time.time() - start_time < timeout:
            try:
                confirmation = client.confirm_transaction(tx_sig, commitment=Confirmed, sleep_seconds=1)
                if confirmation.value[0] is not None:
                    break
            except Exception as e:
                logger.warning(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                await asyncio.sleep(2)
        else:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_sig}")
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ <b>{token_name} ({token_symbol})</b> –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å –≤–æ–≤—Ä–µ–º—è.\n"
                    f"Signature: {tx_sig}\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –≤ —ç–∫—Å–ø–ª–æ—Ä–µ—Ä–µ.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

        # --- –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê ---
        logger.info(f"–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        profit_percentage = wallet_config.get('profit_percentage', 100.0)
        multiplier_for_target = 1 + (profit_percentage / 100.0)
        target_price_usdt = current_price_usdt * multiplier_for_target

        purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
        purchased_tokens = {}
        if os.path.exists(purchased_tokens_file):
            try:
                with open(purchased_tokens_file, 'r') as f:
                    purchased_tokens = json.load(f)
            except json.JSONDecodeError:
                logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {purchased_tokens_file}, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")

        purchased_tokens[token_address] = {
            "name": token_name,
            "symbol": token_symbol,
            "purchase_price_usdt": current_price_usdt,
            "current_price_usdt": current_price_usdt,
            "target_price_usdt": target_price_usdt,
            "profit_percentage_target": profit_percentage,
            "purchase_amount_usdt": purchase_amount_usdt,
            "purchase_time": str(time.time()),
            "tx_signature": str(tx_sig)
        }

        os.makedirs(os.path.dirname(purchased_tokens_file), exist_ok=True)
        with open(purchased_tokens_file, 'w') as f:
            json.dump(purchased_tokens, f, indent=2)

        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –ö—É–ø–ª–µ–Ω —Ç–æ–∫–µ–Ω <b>{token_name} ({token_symbol})</b>\n"
                f"üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>{current_price_usdt:.6f} USDT</b>\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{purchase_amount_usdt:.6f} USDT</b> ({trade_percentage}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)\n"
                f"üéØ –¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏: <b>{target_price_usdt:.6f} USDT</b> (+{profit_percentage}% / x{multiplier_for_target:.2f})\n"
                f"üìù TX: <code>{tx_sig}</code>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return True
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}: {e}")
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞ {token_name} ({token_symbol}):\n{str(e)[:200]}...",
                parse_mode="HTML"
            )
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {ex}")
        return False

async def check_and_sell_tokens(user_id: int, wallet_name: str, bot: Bot):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {user_id}/{wallet_name}")
    purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
    
    if not os.path.exists(purchased_tokens_file):
        logger.info(f"–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id}/{wallet_name}")
        return
        
    try:
        with open(purchased_tokens_file, 'r') as f:
            purchased_tokens = json.load(f)
            
        updated_tokens = {}
        sold_any = False
        
        for token_address, token_data in purchased_tokens.items():
            current_price_usdt = await get_token_current_price(token_address)
            if current_price_usdt <= 0:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ {token_address}. –ü—Ä–æ–ø—É—Å–∫.")
                updated_tokens[token_address] = token_data
                continue
                
            purchase_price = token_data.get('purchase_price_usdt', 0)
            target_price = token_data.get('target_price_usdt', 0)

            token_data['current_price_usdt'] = current_price_usdt
            updated_tokens[token_address] = token_data

            if current_price_usdt >= target_price and target_price > 0:
                logger.info(f"–¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –¥–ª—è {token_address} ({current_price_usdt} >= {target_price}). –ü—Ä–æ–¥–∞–∂–∞...")
                sold = await sell_token(user_id, wallet_name, token_address, bot)
                if sold:
                    sold_any = True
                    if token_address in updated_tokens:
                        del updated_tokens[token_address]
                else:
                    updated_tokens[token_address] = token_data

        if sold_any:
            with open(purchased_tokens_file, 'w') as f:
                json.dump(updated_tokens, f, indent=2)
            logger.info(f"–°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id}/{wallet_name} –æ–±–Ω–æ–≤–ª–µ–Ω.")
            
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {purchased_tokens_file}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–µ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {user_id}/{wallet_name}: {e}")

async def get_token_balance(wallet_address: str, token_address: str) -> int:
    try:
        client = Client(SOLANA_RPC_URL)
        opts = TokenAccountOpts(mint=Pubkey.from_string(token_address))
        response = client.get_token_accounts_by_owner(
            Pubkey.from_string(wallet_address),
            opts
        )
        if hasattr(response, 'value') and response.value:
            accounts = response.value
            if accounts:
                balance_str = accounts[0].account.data.parsed['info']['tokenAmount']['amount']
                return int(balance_str)
        elif isinstance(response, dict) and 'result' in response:
            result = response['result']
            if result and 'value' in result and result['value']:
                accounts = result['value']
                if accounts:
                    balance_str = accounts[0]['account']['data']['parsed']['info']['tokenAmount']['amount']
                    return int(balance_str)
                    
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_address}: {e}")
        return 0
async def sell_token(user_id: int, wallet_name: str, token_address: str, bot: Bot) -> bool:
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}")
    wm = WalletManager()
    
    private_key_b58 = wm.get_wallet_private_key(user_id, wallet_name)
    wallet_address = wm.get_wallet_address(user_id, wallet_name)
    
    if not private_key_b58 or not wallet_address:
        logger.error(f"–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return False
        
    try:
        keypair = Keypair.from_bytes(base58.b58decode(private_key_b58))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è {wallet_name}: {e}")
        return False
        
    try:
        token_balance = await get_token_balance(wallet_address, token_address)
        if token_balance <= 0:
            logger.error(f"–ù—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ {token_address} –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ {wallet_address}")
            return False

        token_metadata = get_token_metadata(token_address)
        token_name = token_metadata.get('name', 'Unknown')
        token_symbol = token_metadata.get('symbol', 'UNKNOWN')

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–≤–æ–ø–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        swap_transaction = get_jupiter_swap_transaction_improved(
            input_mint=token_address,
            output_mint="So11111111111111111111111111111111111111112",
            amount=token_balance,
            slippage=100,
            user_public_key=wallet_address
        )
        
        if not swap_transaction:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é swap –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {token_address}")
            return False

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        try:
            transaction_base64 = swap_transaction['swapTransaction']
            raw_txn = base64.b64decode(transaction_base64)
            transaction = VersionedTransaction.from_bytes(raw_txn)
            message_bytes = bytes(transaction.message)
            signature = keypair.sign_message(message_bytes)
            signed_tx = VersionedTransaction(message_bytes, [signature])
            raw_signed_txn = bytes(signed_tx)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        client = Client(SOLANA_RPC_URL)
        tx_sig = client.send_raw_transaction(raw_signed_txn)
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_sig}")
        
        # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        start_time = time.time()
        timeout = 30
        while time.time() - start_time < timeout:
            try:
                confirmation = client.confirm_transaction(tx_sig, commitment=Confirmed, sleep_seconds=1)
                if confirmation.value[0] is not None:
                    break
            except Exception as e:
                logger.warning(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {e}")
                await asyncio.sleep(2)
        else:
            logger.error(f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏: {tx_sig}")
            return False

        logger.info(f"–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        purchased_tokens_file = os.path.join(PURCHASED_TOKENS_DIR, f"{user_id}_{wallet_name}.json")
        purchase_price = 0.0
        purchase_amount = 0.0
        profit_percent_target = 0.0
        
        if os.path.exists(purchased_tokens_file):
            try:
                with open(purchased_tokens_file, 'r') as f:
                    purchased_tokens = json.load(f)
                token_data = purchased_tokens.get(token_address, {})
                purchase_price = token_data.get('purchase_price_usdt', 0)
                purchase_amount = token_data.get('purchase_amount_usdt', 0)
                profit_percent_target = token_data.get('profit_percentage_target', 100.0)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {purchased_tokens_file} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –ü—Ä–æ–¥–∞–Ω —Ç–æ–∫–µ–Ω <b>{token_name} ({token_symbol})</b>\n"
                f"üí∞ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>{purchase_price:.6f} USDT</b>\n"
                f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{purchase_amount:.6f} USDT</b>\n"
                f"üéØ –¶–µ–ª—å –±—ã–ª–∞: +{profit_percent_target}%\n"
                f"üìù TX: <code>{tx_sig}</code>\n"
                f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω.",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ: {e}")

        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–∫–µ–Ω–∞ {token_address} –¥–ª—è {user_id}/{wallet_name}: {e}")
        try:
            await bot.send_message(
                user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–∞ {token_address}:\n{str(e)[:200]}...",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

# –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
NEW_TOKENS_FILE = os.path.join(PURCHASED_TOKENS_DIR, 'new_tokens.json')

def save_new_token(token_address: str, token_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ç–æ–∫–µ–Ω–µ"""
    try:
        if not os.path.exists(NEW_TOKENS_FILE):
            new_tokens = {}
        else:
            with open(NEW_TOKENS_FILE, 'r') as f:
                new_tokens = json.load(f)
        
        new_tokens[token_address] = token_data
        
        os.makedirs(os.path.dirname(NEW_TOKENS_FILE), exist_ok=True)
        with open(NEW_TOKENS_FILE, 'w') as f:
            json.dump(new_tokens, f, indent=2)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ {token_address}: {e}")

def get_new_tokens() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        if not os.path.exists(NEW_TOKENS_FILE):
            return {}
        
        with open(NEW_TOKENS_FILE, 'r') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return {}

async def monitor_new_tokens(bot: Bot):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—ã –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            new_tokens = get_new_tokens()
            
            for token_address, token_data in new_tokens.items():
                try:
                    current_price = await get_token_current_price(token_address)
                    if current_price > 0:
                        purchase_price = token_data.get('purchase_price_usdt', 0)
                        if purchase_price > 0:
                            profit_percent = ((current_price - purchase_price) / purchase_price) * 100
                            multiplier = current_price / purchase_price
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π
                            user_id = token_data.get('user_id')
                            wallet_name = token_data.get('wallet_name')
                            
                            if multiplier >= 4:
                                await bot.send_message(
                                    user_id,
                                    f"üöÄ –¢–æ–∫–µ–Ω <b>{token_data.get('name', 'Unknown')} ({token_data.get('symbol', 'UNKNOWN')})</b> –¥–æ—Å—Ç–∏–≥ x4!\n"
                                    f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:.6f} USDT</b>\n"
                                    f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>+{profit_percent:.2f}%</b> (x{multiplier:.2f})",
                                    parse_mode="HTML"
                                )
                            elif multiplier >= 3:
                                await bot.send_message(
                                    user_id,
                                    f"üü¢ –¢–æ–∫–µ–Ω <b>{token_data.get('name', 'Unknown')} ({token_data.get('symbol', 'UNKNOWN')})</b> –¥–æ—Å—Ç–∏–≥ x3!\n"
                                    f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:.6f} USDT</b>\n"
                                    f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>+{profit_percent:.2f}%</b> (x{multiplier:.2f})",
                                    parse_mode="HTML"
                                )
                            elif multiplier >= 2:
                                await bot.send_message(
                                    user_id,
                                    f"üü° –¢–æ–∫–µ–Ω <b>{token_data.get('name', 'Unknown')} ({token_data.get('symbol', 'UNKNOWN')})</b> –¥–æ—Å—Ç–∏–≥ x2!\n"
                                    f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price:.6f} USDT</b>\n"
                                    f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>+{profit_percent:.2f}%</b> (x{multiplier:.2f})",
                                    parse_mode="HTML"
                                )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ {token_address}: {e}")
            
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            await asyncio.sleep(30)

async def start_monitoring(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–æ–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
    task1 = asyncio.create_task(monitor_purchased_tokens(bot))
    task2 = asyncio.create_task(monitor_new_tokens(bot))
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
    await asyncio.gather(task1, task2)

async def monitor_purchased_tokens(bot: Bot):
    """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥"""
    while True:
        try:
            wm = WalletManager()
            all_wallets = wm.get_all_wallets()
            
            for user_id, wallet_name in all_wallets:
                await check_and_sell_tokens(user_id, wallet_name, bot)
                
            await asyncio.sleep(60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            await asyncio.sleep(60)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
async def buy_token_with_monitoring(user_id: int, wallet_name: str, token_address: str, bot: Bot):
    """–ü–æ–∫—É–ø–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    success = await buy_token(user_id, wallet_name, token_address, bot)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        token_metadata = get_token_metadata(token_address)
        token_name = token_metadata.get('name', 'Unknown')
        token_symbol = token_metadata.get('symbol', 'UNKNOWN')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
        current_price = await get_token_current_price(token_address)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        new_token_data = {
            "name": token_name,
            "symbol": token_symbol,
            "purchase_price_usdt": current_price,
            "user_id": user_id,
            "wallet_name": wallet_name,
            "purchase_time": str(time.time())
        }
        
        save_new_token(token_address, new_token_data)
        logger.info(f"–¢–æ–∫–µ–Ω {token_address} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    return success
