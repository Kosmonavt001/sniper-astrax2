import asyncio
import datetime
import json
import logging
import os
from typing import Dict, List
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from mnemonic import Mnemonic
from solders.pubkey import Pubkey
from solders.keypair import Keypair
import base58
import requests

from filters import check_token_scam_risk
from keyboards import create_main_menu, create_wallet_menu
from wallet_manager import WalletManager
from trader import get_user_config, get_purchased_tokens_info
from bot.password_manager import PasswordManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CONFIG_DIR = 'config'
BOT_CONFIG_FILE = os.path.join(CONFIG_DIR, 'bot_config.json')
USER_PASSWORDS_FILE = 'data/user_passwords.json'
PHOTO_DIR = 'photo'
PURCHASED_TOKENS_DIR = 'data/purchased_tokens'
NEWLY_FOUND_TOKENS_FILE = 'data/newly_found_tokens.json'

class BotConfig:
    def __init__(self):
        self.config = self.load_or_create_config()
        self.password = self.config.get('password', 'default_password')
        
    def load_or_create_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞"""
        default_config = {
            "password": "admin123",
            "bot_token": "YOUR_BOT_TOKEN_HERE"
        }
        
        if os.path.exists(BOT_CONFIG_FILE):
            try:
                with open(BOT_CONFIG_FILE, 'r') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
                return default_config
        else:
            with open(BOT_CONFIG_FILE, 'w') as f:
                json.dump(default_config, f, indent=2)
            return default_config

class WalletStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_wallet_name = State()
    waiting_for_wallet_address = State()
    waiting_for_mnemonic = State()
    waiting_for_purchase_price = State()
    waiting_for_targets = State()
    waiting_for_trade_percentage = State()
    waiting_for_profit_percentage = State()
    editing_setting = State() 

config = BotConfig()
password_manager = PasswordManager()
wallet_manager = WalletManager()

bot = Bot(token=config.config.get('bot_token', ''))
dp = Dispatcher()

def get_photo_path(filename: str) -> str:
    return os.path.join(PHOTO_DIR, filename)

@dp.callback_query(F.data == "trade_settings")
async def trade_settings_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    user_id = callback.from_user.id
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    # –∏–ª–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ. –ü–æ–∫–∞ –ø–æ–∫–∞–∂–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞.
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, —Å–¥–µ–ª–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –∫–æ—à–µ–ª—å–∫–∞.
    # –ò–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ—à–µ–ª—å–∫–∞. –í—ã–±–µ—Ä–µ–º –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.
    # –ù–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –∫–æ—à–µ–ª–µ–∫ –≤—ã–±—Ä–∞–Ω. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –∫–æ—à–µ–ª—å–∫–∞. –≠—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Ç–∞–∫.
    # –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ—Ç –∫–æ—à–µ–ª–µ–∫.
    # –ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    wallets = wallet_manager.get_user_wallets(user_id)
    if not wallets:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", show_alert=True)
        return

    keyboard = InlineKeyboardBuilder()
    for name in wallets.keys():
        keyboard.button(text=f"üëõ {name}", callback_data=f"settings_wallet_{name}")
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    keyboard.adjust(1)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –≤–º–µ—Å—Ç–æ edit_caption ---
    try:
        await callback.message.edit_text( # <--- –ò–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
            text="‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:", # <--- –ò –∑–¥–µ—Å—å
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        if "message is not modified" in e.message.lower():
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
        elif "message can't be edited" in e.message.lower():
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ)
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text="‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:",
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
            # –ò–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
            # await callback.message.delete()
            # await callback.message.answer(...)
        else:
            # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ trade_settings_menu: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text="‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:",
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
    await callback.answer()

@dp.callback_query(F.data.startswith("settings_wallet_"))
async def choose_wallet_for_settings(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä, "settings_wallet_MyWallet"
    wallet_name = callback.data.split("_", 2)[2]
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ wallet_manager –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    wallet_config = wallet_manager.get_wallet_config(user_id, wallet_name)
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ —É–º–æ–ª—á–∞–Ω–∏—è–º–∏
    trade_percentage = wallet_config.get('trade_percentage', 1.0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%
    profit_percentage = wallet_config.get('profit_percentage', 100.0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100% (x2)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}'</b>\n\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É: <b>{trade_percentage}%</b>\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞: <b>{profit_percentage}%</b> (x{(1 + profit_percentage/100):.2f})\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí± –ò–∑–º–µ–Ω–∏—Ç—å % –æ—Ç –±–∞–ª–∞–Ω—Å–∞", callback_data=f"change_trade_percent_{wallet_name}")
    keyboard.button(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å % –ø—Ä–∏–±—ã–ª–∏", callback_data=f"change_profit_percent_{wallet_name}")
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="trade_settings") # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ "trade_settings" –≤–µ–¥–µ—Ç –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞
    keyboard.adjust(1) # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞)
        await callback.message.edit_caption(
            caption=text,
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
    except TelegramBadRequest as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        if "no caption" in e.message.lower() or "message is not modified" in e.message.lower():
            try:
                await callback.message.edit_text(
                    text=text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="HTML"
                )
            except TelegramBadRequest as e2:
                # –ï—Å–ª–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ),
                # –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º.
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ choose_wallet_for_settings: {e2}")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: await callback.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë
            logger.error(f"TelegramBadRequest –≤ choose_wallet_for_settings: {e}")
            raise
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        logger.error(f"–û—à–∏–±–∫–∞ –≤ choose_wallet_for_settings: {e}")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        # await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        # return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    await state.update_data(current_wallet_for_settings=wallet_name)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∫—Ä—É—Ç–∏–ª–∫—É"
    await callback.answer()

@dp.callback_query(F.data.startswith("change_trade_percent_"))
async def start_change_trade_percent(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞"""
    wallet_name = callback.data.split("_", 3)[3] # "change_trade_percent_NAME"
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    wallet_config = wallet_manager.get_wallet_config(user_id, wallet_name)
    current_percent = wallet_config.get('trade_percentage', 1.0)

    await state.set_state(WalletStates.waiting_for_trade_percentage)
    await state.update_data(current_wallet_for_settings=wallet_name) # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–∏–º

    await callback.message.edit_caption(
        caption=f"üí± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ (—Ç–µ–∫—É—â–∏–π: {current_percent}%):",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"settings_wallet_{wallet_name}").as_markup()
    )
    await callback.answer()

@dp.message(WalletStates.waiting_for_trade_percentage)
async def get_new_trade_percent(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞"""
    user_id = message.from_user.id
    try:
        new_percent = float(message.text.strip().replace('%', '')) # –£–±–∏—Ä–∞–µ–º % –µ—Å–ª–∏ –≤–≤–µ–ª–∏
        if new_percent <= 0 or new_percent > 100:
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –Ω–µ –±–æ–ª—å—à–µ 100")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.5):")
        return

    user_data = await state.get_data()
    wallet_name = user_data.get('current_wallet_for_settings')

    if not wallet_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
    wallet_manager.update_wallet_config(user_id, wallet_name, {'trade_percentage': new_percent})

    await state.clear()
    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_percent}%.",
        reply_markup=create_main_menu()
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ—à–µ–ª—å–∫–∞
    # await choose_wallet_for_settings(...) - —Å–ª–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é, –ª—É—á—à–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞. –ü—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é.
    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

@dp.callback_query(F.data.startswith("change_profit_percent_"))
async def start_change_profit_percent(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã–ª–∏"""
    wallet_name = callback.data.split("_", 3)[3] # "change_profit_percent_NAME"
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    wallet_config = wallet_manager.get_wallet_config(user_id, wallet_name)
    current_percent = wallet_config.get('profit_percentage', 100.0) # x2

    await state.set_state(WalletStates.waiting_for_profit_percentage)
    await state.update_data(current_wallet_for_settings=wallet_name) # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–∏–º

    await callback.message.edit_caption(
        caption=f"üéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Ç–µ–∫—É—â–∏–π: {current_percent}%, –º–Ω–æ–∂–∏—Ç–µ–ª—å x{(1 + current_percent/100):.2f}):",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"settings_wallet_{wallet_name}").as_markup()
    )
    await callback.answer()

@dp.message(WalletStates.waiting_for_profit_percentage)
async def get_new_profit_percent(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã–ª–∏"""
    user_id = message.from_user.id
    try:
        new_percent = float(message.text.strip().replace('%', '')) # –£–±–∏—Ä–∞–µ–º % –µ—Å–ª–∏ –≤–≤–µ–ª–∏
        if new_percent < 0: # –ú–æ–∂–Ω–æ –∏ —É–±—ã—Ç–æ–∫ –∑–∞–¥–∞—Ç—å, –Ω–æ 0 - –º–∏–Ω–∏–º—É–º
            raise ValueError("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –¥–ª—è x2, 200 –¥–ª—è x3):")
        return

    user_data = await state.get_data()
    wallet_name = user_data.get('current_wallet_for_settings')

    if not wallet_name:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
    wallet_manager.update_wallet_config(user_id, wallet_name, {'profit_percentage': new_percent})

    await state.clear()
    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ '{wallet_name}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_percent}% (–º–Ω–æ–∂–∏—Ç–µ–ª—å x{(1 + new_percent/100):.2f}).",
        reply_markup=create_main_menu()
    )

def save_found_token_info(token_address: str, token_name: str, token_symbol: str, price_usd: float):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ –≤ —Ñ–∞–π–ª."""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(NEWLY_FOUND_TOKENS_FILE), exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        from datetime import datetime, timezone
        now = datetime.now(timezone.utc)
        timestamp_str = now.strftime("%Y-%m-%d %H:%M:%S UTC")

        token_info = {
            "address": token_address,
            "name": token_name,
            "symbol": token_symbol,
            "price_usd": price_usd,
            "discovered_at": timestamp_str
        }

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        existing_tokens = []
        if os.path.exists(NEWLY_FOUND_TOKENS_FILE):
            try:
                with open(NEWLY_FOUND_TOKENS_FILE, 'r') as f:
                    existing_tokens = json.load(f)
            except json.JSONDecodeError:
                logging.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {NEWLY_FOUND_TOKENS_FILE}, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        existing_tokens.insert(0, token_info)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        if len(existing_tokens) > 10:
            existing_tokens = existing_tokens[:10]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open(NEWLY_FOUND_TOKENS_FILE, 'w') as f:
            json.dump(existing_tokens, f, indent=2)

        logging.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ {token_symbol} ({token_address}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {NEWLY_FOUND_TOKENS_FILE}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ {token_address}: {e}")

def get_last_found_token_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        if os.path.exists(NEWLY_FOUND_TOKENS_FILE):
            with open(NEWLY_FOUND_TOKENS_FILE, 'r') as f:
                tokens_data = json.load(f)
                if tokens_data and isinstance(tokens_data, list) and len(tokens_data) > 0:
                    return tokens_data[0] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π) —ç–ª–µ–º–µ–Ω—Ç
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ: {e}")
    return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
@dp.callback_query(lambda c: c.data.startswith("refresh_"))
async def refresh_price(callback_query: types.CallbackQuery):
    token_address = callback_query.data.replace("refresh_", "")
    scam_info = await check_token_scam_risk(token_address)
    
    if scam_info["has_pairs"]:
        new_text = (
            f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</b>: ${float(scam_info['price_usd']):.8f} USD\n"
            f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(datetime.timezone.utc).strftime('%H:%M:%S UTC')}"
        )
    else:
        new_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É."

    await callback_query.answer()
    await callback_query.message.edit_caption(caption=new_text, parse_mode="HTML")
@dp.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if password_manager.is_user_authenticated(user_id):
        menu_photo_path = get_photo_path("menu.png")
        photo = FSInputFile(menu_photo_path)
        await message.answer_photo(
            photo=photo,
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Solana Wallet Bot!",
            reply_markup=create_main_menu()
        )
    else:
        await state.set_state(WalletStates.waiting_for_password)
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")

@dp.message(WalletStates.waiting_for_password)
async def check_password(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    user_id = message.from_user.id
    
    if message.text == config.password:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password_manager.save_user_password(user_id)
        await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(PHOTO_DIR):
            os.makedirs(PHOTO_DIR)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        menu_photo_path = get_photo_path("menu.png")
        photo = FSInputFile(menu_photo_path)
        await message.answer_photo(
            photo=photo,
            caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Solana Wallet Bot!",
            reply_markup=create_main_menu()
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu_photo_path = get_photo_path("menu.png")
    photo = FSInputFile(menu_photo_path)
    input_media = InputMediaPhoto(media=photo)
    try:
        await callback.message.edit_media(
            media=input_media,
            reply_markup=create_main_menu()
        )
    except TelegramBadRequest:
        await callback.message.edit_text(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_main_menu()
        )
    await callback.answer()

@dp.callback_query(F.data == "my_wallet")
async def my_wallet_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫–æ—à–µ–ª—å–∫–æ–≤"""
    user_id = callback.from_user.id
    wallets = wallet_manager.get_user_wallets(user_id)
    
    if wallets:
        text = "üëõ –í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n"
        for name, wallet_data in wallets.items():
            address = wallet_data.get('address', 'N/A')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ RPC –≤—ã–∑–æ–≤
            balance = wallet_manager.get_wallet_balance_solana(address)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {name} ({address}): {balance} SOL")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ –∞–¥—Ä–µ—Å–∞
            short_address = f"{address[:4]}...{address[-4:]}" if len(address) > 8 else address
            text += f"\nüîπ <b>{name}</b>\nüì¨ –ê–¥—Ä–µ—Å: <code>{short_address}</code>\nüí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} SOL</b>\n"
    else:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤.\n–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–æ—à–µ–ª—å–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    wallet_photo_path = get_photo_path("wallet.png")
    if os.path.exists(wallet_photo_path):
        photo = FSInputFile(wallet_photo_path)
        input_media = InputMediaPhoto(media=photo, caption=text, parse_mode="HTML")
        try:
            await callback.message.edit_media(
                media=input_media,
                reply_markup=create_wallet_menu(user_id)
            )
        except TelegramBadRequest:
            await callback.message.edit_caption(
                caption=text,
                reply_markup=create_wallet_menu(user_id),
                parse_mode="HTML"
            )
    else:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=create_wallet_menu(user_id),
            parse_mode="HTML"
        )
    await callback.answer()

@dp.callback_query(F.data == "add_wallet")
async def start_add_wallet(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    await state.set_state(WalletStates.waiting_for_wallet_name)
    await callback.message.edit_caption(
        caption="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_wallet").as_markup()
    )
    await callback.answer()

@dp.message(WalletStates.waiting_for_wallet_name)
async def get_wallet_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
    await state.update_data(wallet_name=message.text)
    await state.set_state(WalletStates.waiting_for_wallet_address)
    await message.answer(
        "üì¨ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Solana –∫–æ—à–µ–ª—å–∫–∞:",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_wallet").as_markup()
    )

@dp.message(WalletStates.waiting_for_wallet_address)
async def get_wallet_address(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    wallet_address = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
    if not wallet_manager.verify_solana_address(wallet_address):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å Solana –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É seed —Ñ—Ä–∞–∑—ã
    await state.update_data(wallet_address=wallet_address)
    await state.set_state(WalletStates.waiting_for_mnemonic)
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (Base58, ~88 —Å–∏–º–≤–æ–ª–æ–≤):"
        "<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b> –≠—Ç–æ –¥–∞—ë—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ—à–µ–ª—å–∫—É! "
        "–ë–æ—Ç —Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ —ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å—É."
        "–ü—Ä–∏–º–µ—Ä: 5HvGqjXoKZ7BdYJU2eFQvDpV1hR7tWzgkE3rN9xTmSsP...",
        parse_mode="HTML",
        reply_markup=InlineKeyboardBuilder().button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_wallet").as_markup()
    )

@dp.message(WalletStates.waiting_for_mnemonic)
async def get_private_key(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞"""
    private_key_b58 = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ Base58 (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if len(private_key_b58) < 80 or len(private_key_b58) > 96:
        await message.answer("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π Base58 –¥–ª–∏–Ω–æ–π ~88 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    wallet_name = user_data.get('wallet_name')
    wallet_address = user_data.get('wallet_address')
    user_id = message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º
    success = wallet_manager.add_wallet(user_id, wallet_name, wallet_address, private_key_b58)

    if success:
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–æ—à–µ–ª–µ–∫ <b>{wallet_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            f"üì¨ –ê–¥—Ä–µ—Å: <code>{wallet_address[:6]}...{wallet_address[-4:]}</code>"
            f"üîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API",
            parse_mode="HTML",
            reply_markup=create_main_menu()
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–¥—Ä–µ—Å—É.",
            reply_markup=create_main_menu()
        )

@dp.callback_query(F.data.startswith("wallet_"))
async def show_wallet_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ"""
    wallet_name = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    wallets = wallet_manager.get_user_wallets(user_id)
    if wallet_name in wallets:
        wallet_data = wallets[wallet_name]
        address = wallet_data.get('address', 'N/A')
        balance = wallet_manager.get_wallet_balance_solana(address)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} ({address}): {balance} SOL")
        trade_percentage = wallet_data.get('trade_percentage', 1.0)
        profit_percentage = wallet_data.get('profit_percentage', 100.0)
        tokens_info = await get_purchased_tokens_info(user_id, wallet_name)
        purchased_tokens_info = ""
        if tokens_info:
            purchased_tokens_info = "\n\nüìä –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\n"
            for token in tokens_info:
                purchased_tokens_info += (
                    f"{token['status']} <b>{token['name']} ({token['symbol']})</b> (<code>{token['address'][:6]}...{token['address'][-4:]}</code>)\n"
                    f"   üíµ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${token['purchase_price']:.6f}\n"
                    f"   üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${token['current_price']:.6f}\n"
                    f"   üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{token['multiplier']:.2f}\n"
                    f"   üìä –ü—Ä–æ—Ñ–∏—Ç: {token['profit_percent']:.2f}%\n"
                    f"   üéØ –¶–µ–ª–∏: x2(${token['target_x2']:.6f}), x3(${token['target_x3']:.6f}), x4(${token['target_x4']:.6f})\n\n"
                )
        else:
            purchased_tokens_info = "\n\nüì≠ –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."
        text = (
            f"üëõ <b>{wallet_name}</b>\n\n"
            f"üì¨ –ê–¥—Ä–µ—Å: <code>{address}</code>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} SOL</b>\n"
            f"üìä % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É: <b>{trade_percentage}%</b>\n"
            f"üìà % –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞: <b>{profit_percentage}%</b> (x{(1 + profit_percentage/100):.2f})\n"
            f"{purchased_tokens_info}"
            f"\nüìä –î–µ–π—Å—Ç–≤–∏—è:"
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"refresh_{wallet_name}")
        keyboard.button(text="üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", callback_data=f"sign_{wallet_name}")
        keyboard.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data=f"settings_wallet_{wallet_name}")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_wallet")
        keyboard.adjust(1)
        wallet_photo_path = get_photo_path("wallet.png")
        if os.path.exists(wallet_photo_path):
            photo = FSInputFile(wallet_photo_path)
            input_media = InputMediaPhoto(media=photo, caption=text, parse_mode="HTML")
            try:
                await callback.message.edit_media(
                    media=input_media,
                    reply_markup=keyboard.as_markup()
                )
            except TelegramBadRequest:
                await callback.message.edit_caption(
                    caption=text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="HTML"
                )
        else:
            await callback.message.edit_caption(
                caption=text,
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
    await callback.answer()

@dp.callback_query(F.data.startswith("refresh_"))
async def refresh_balance(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    wallet_name = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id

    wallets = wallet_manager.get_user_wallets(user_id)
    if wallet_name in wallets:
        wallet_data = wallets[wallet_name]
        address = wallet_data.get('address', 'N/A')

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ RPC –≤—ã–∑–æ–≤
        balance = wallet_manager.get_wallet_balance_solana(address)

        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name} ({address}): {balance} SOL")

        # --- –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ ---
        trade_percentage = wallet_data.get('trade_percentage', 1.0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1%
        profit_percentage = wallet_data.get('profit_percentage', 100.0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100% (x2)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        profit_multiplier = 1 + (profit_percentage / 100)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
        tokens_info = await get_purchased_tokens_info(user_id, wallet_name)
        purchased_tokens_info = ""

        if tokens_info:
            purchased_tokens_info = "\n\nüìä –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\n"
            for token in tokens_info:
                purchased_tokens_info += (
                    f"{token['status']} <b>{token['name']} ({token['symbol']})</b> (<code>{token['address'][:6]}...{token['address'][-4:]}</code>)\n"
                    f"   üíµ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${token['purchase_price']:.6f}\n"
                    f"   üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${token['current_price']:.6f}\n"
                    f"   üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{token['multiplier']:.2f}\n"
                    f"   üìä –ü—Ä–æ—Ñ–∏—Ç: {token['profit_percent']:.2f}%\n"
                    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–ª–∏ x2, x3, x4, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–Ω–∞ —Ü–µ–ª—å
                    # f"   üéØ –¶–µ–ª–∏: x2(${token['target_x2']:.6f}), x3(${token['target_x3']:.6f}), x4(${token['target_x4']:.6f})\n\n"
                    f"\n"
                )
        else:
            purchased_tokens_info = "\n\nüì≠ –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤."

        text = (
            f"üëõ <b>{wallet_name}</b>\n\n"
            f"üì¨ –ê–¥—Ä–µ—Å: <code>{address}</code>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} SOL</b>\n"
            f"üìä % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É: <b>{trade_percentage}%</b>\n"
            f"üìà % –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞: <b>{profit_percentage}%</b> (–º–Ω–æ–∂–∏—Ç–µ–ª—å x{profit_multiplier:.2f})\n"
            f"{purchased_tokens_info}"
            f"\nüìä –î–µ–π—Å—Ç–≤–∏—è:"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"refresh_{wallet_name}")
        keyboard.button(text="üìù –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", callback_data=f"sign_{wallet_name}")
        # --- –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏ ---
        keyboard.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏", callback_data=f"settings_wallet_{wallet_name}")
        keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_wallet")
        keyboard.adjust(1) # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

        # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ edit_caption, —Ç–∞–∫ –∏ edit_text ---
        try:
             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–æ—à–µ–ª—å–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            wallet_photo_path = get_photo_path("wallet.png")
            if os.path.exists(wallet_photo_path):
                photo = FSInputFile(wallet_photo_path)
                input_media = InputMediaPhoto(media=photo, caption=text, parse_mode="HTML")
                await callback.message.edit_media(
                    media=input_media,
                    reply_markup=keyboard.as_markup()
                )
            else:
                 # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
                await callback.message.edit_caption(
                    caption=text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="HTML"
                )
        except TelegramBadRequest as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞),
            # –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            if "no caption" in e.message.lower() or "message is not modified" in e.message.lower():
                try:
                    await callback.message.edit_text(
                        text=text,
                        reply_markup=keyboard.as_markup(),
                        parse_mode="HTML"
                    )
                except TelegramBadRequest as e2:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ refresh_balance (edit_text): {e2}")
                    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    # await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
                logger.error(f"TelegramBadRequest –≤ refresh_balance: {e}")
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ refresh_balance: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, —á—Ç–æ–±—ã callback.answer() –≤ –∫–æ–Ω—Ü–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è

    await callback.answer("üîÑ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)


@dp.callback_query(F.data.startswith("sign_"))
async def sign_transaction(callback: CallbackQuery):
    """–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    wallet_name = callback.data.split("_", 1)[1]
    await callback.answer(f"–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet_name}", show_alert=True)
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

@dp.callback_query(F.data == "stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = callback.from_user.id
    wallets = wallet_manager.get_user_wallets(user_id)
    
    total_wallets = len(wallets)
    total_balance = 0.0
    
    # –°—É–º–º–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    for wallet_data in wallets.values():
        address = wallet_data.get('address', '')
        if address:
            balance = wallet_manager.get_wallet_balance_solana(address)
            total_balance += balance
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
    total_tokens = 0
    total_profit = 0.0
    
    for wallet_name in wallets.keys():
        tokens_info = await get_purchased_tokens_info(user_id, wallet_name)
        total_tokens += len(tokens_info)
        
        for token in tokens_info:
            total_profit += token['profit_percent']
    
    avg_profit = total_profit / total_tokens if total_tokens > 0 else 0
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üëõ –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤: <b>{total_wallets}</b>\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{total_balance:.6f} SOL</b>\n"
        f"ü™ô –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: <b>{total_tokens}</b>\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{avg_profit:.2f}%</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: <code>{user_id}</code>"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await callback.message.edit_caption(
        caption=text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query()
async def handle_other_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback"""
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

@dp.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = inline_query.from_user.id
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
    last_token_info = get_last_found_token_info()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []

    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–æ–∫–µ–Ω–µ (–¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º)
    if last_token_info:
        try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ 'price_usd' —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ –≤ —Ñ–∞–π–ª–µ
            price_usd_raw = last_token_info['price_usd']
            price_usd_float = float(price_usd_raw)
            price_usd_formatted = f"{price_usd_float:.6f}"
        except (ValueError, TypeError, KeyError) as e:
            logging.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—É {last_token_info.get('price_usd')} –≤ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {last_token_info.get('address')}. –ü—Ä–∏—á–∏–Ω–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'N/A'.")
            price_usd_formatted = "N/A"
        token_text = (
            f"üöÄ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:</b>\n"
            f"ü™ô <b>{last_token_info['name']} ({last_token_info['symbol']})</b>\n"
            f"üì¨ –ê–¥—Ä–µ—Å: <code>{last_token_info['address']}</code>\n"
            f"üí∞ –¶–µ–Ω–∞: ${price_usd_formatted}\n"  # <-- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
            f"üïí –û–±–Ω–∞—Ä—É–∂–µ–Ω: {last_token_info['discovered_at']}\n"
        )
        results.append(
            InlineQueryResultArticle(
                id="1",
                title=f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {last_token_info['symbol']}",
                input_message_content=InputTextMessageContent(
                    message_text=token_text,
                    parse_mode="HTML"
                ),
                description=f"{last_token_info['name']} | ${price_usd_formatted}", # <-- –ò –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
                thumb_url="https://public.bnbstatic.com/image/pgc/202309/346b46c784cd2703880e824e24acd0ef.png"
            )
        )
    else:
        results.append(
            InlineQueryResultArticle(
                id="1",
                title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                input_message_content=InputTextMessageContent(
                    message_text="‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                ),
                description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö",
                thumb_url="https://public.bnbstatic.com/image/pgc/202309/346b46c784cd2703880e824e24acd0ef.png"
            )
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if password_manager.is_user_authenticated(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
        wallets = wallet_manager.get_user_wallets(user_id)
        total_balance = 0.0
        for wallet_data in wallets.values():
            address = wallet_data.get('address', '')
            if address:
                balance = wallet_manager.get_wallet_balance_solana(address)
                total_balance += balance
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞—Ö
        total_tokens = 0
        total_profit = 0.0
        for wallet_name in wallets.keys():
            tokens_info = await get_purchased_tokens_info(user_id, wallet_name)
            total_tokens += len(tokens_info)
            for token in tokens_info:
                total_profit += token['profit_percent']
        avg_profit = total_profit / total_tokens if total_tokens > 0 else 0

        results.append(
            InlineQueryResultArticle(
                id="2",
                title="–ú–æ–π –±–∞–ª–∞–Ω—Å",
                input_message_content=InputTextMessageContent(
                    message_text=f"üí∞ –í–∞—à –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.6f} SOL\n"
                                 f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}\n"
                                 f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {avg_profit:.2f}%"
                ),
                description=f"–ë–∞–ª–∞–Ω—Å: {total_balance:.6f} SOL | –¢–æ–∫–µ–Ω—ã: {total_tokens}",
                thumb_url="https://coinspot.io/wp-content/uploads/2025/06/phantom-wallet-546056.png"
            )
        )
        results.append(
            InlineQueryResultArticle(
                id="3",
                title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                input_message_content=InputTextMessageContent(
                    message_text="üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
                                 "‚úÖ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ WIF –∑–∞ 0.0001 SOL (2 –º–∏–Ω. –Ω–∞–∑–∞–¥)\n"
                                 "‚úÖ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–∞ BONK –∑–∞ 0.0002 SOL (5 –º–∏–Ω. –Ω–∞–∑–∞–¥)\n"
                                 "‚úÖ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ Jito –∑–∞ 0.00015 SOL (10 –º–∏–Ω. –Ω–∞–∑–∞–¥)"
                ),
                description="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                thumb_url="https://public.bnbstatic.com/image/pgc/202309/346b46c784cd2703880e824e24acd0ef.png"
            )
        )
    else:
         # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
        results.append(
            InlineQueryResultArticle(
                id="4",
                title="–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã",
                input_message_content=InputTextMessageContent(
                    message_text="‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
                ),
                description="–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                thumb_url="https://fb.ru/misc/i/gallery/20380/2318041.jpg"
            )
        )

    await inline_query.answer(results, cache_time=10, is_personal=True) # is_personal=True –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

async def run_bot(bot_instance: Bot):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Solana Wallet Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(PHOTO_DIR):
        os.makedirs(PHOTO_DIR)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {PHOTO_DIR} –¥–ª—è —Ñ–æ—Ç–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not config.config.get('bot_token') or config.config['bot_token'] == 'YOUR_BOT_TOKEN_HERE':
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.json")
        logger.info("–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª bot_config.json")
        return
    
    try:
        await dp.start_polling(bot_instance)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
