# solana_monitor/filters.py

import json
import requests
import logging
from datetime import datetime, timezone
import time
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ì–†–£–ü–ü–´ ---
GROUP_CHAT_ID = "-1003071618300"
TOPIC_MESSAGE_THREAD_ID = 61  # ID —Ç–µ–º—ã/—Ç–æ–ø–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã

def check_liquidity_and_sellability(token_address: str, sol_mint: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –µ–≥–æ –ø—Ä–æ–¥–∞–∂–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω–µ.
    """
    try:
        url = f"https://quote-api.jup.ag/v6/quote?inputMint={token_address}&outputMint={sol_mint}&amount=1"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if "routePlan" in data and len(data["routePlan"]) > 0:
                out_amount = data.get('outAmount', '0')
                if out_amount.isdigit():
                    price_per_token_sol = int(out_amount) / 1_000_000_000
                    return {
                        "has_liquidity": True,
                        "price_per_token_sol": price_per_token_sol,
                        "message": "–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
                    }
        
        dexscreener_url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
        dex_response = requests.get(dexscreener_url, timeout=10)
        
        if dex_response.status_code == 200:
            dex_data = dex_response.json()
            pairs = dex_data.get("pairs", [])
            for pair in pairs:
                quote_token = pair.get("quoteToken", {})
                if quote_token.get("symbol", "").upper() == "SOL":
                    return {
                        "has_liquidity": True,
                        "price_per_token_sol": 0,
                        "message": "–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ DexScreener"
                    }
        
        return {
            "has_liquidity": False,
            "price_per_token_sol": 0,
            "message": "–ù–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—É–ª–∞"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è {token_address}: {e}")
        return {
            "has_liquidity": False,
            "price_per_token_sol": 0,
            "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
        }


def check_token_via_rugcheck(token_address: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ RugCheck.xyz API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç.
    """
    try:
        rugcheck_api_url = f"https://api.rugcheck.xyz/v1/tokens/{token_address}/report"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        response = requests.get(rugcheck_api_url, headers=headers, timeout=15)

        if response.status_code != 200:
            logger.warning(f"RugCheck API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code} –¥–ª—è {token_address}")
            return {"error": f"Status {response.status_code}", "has_report": False}

        data = response.json()
        return {
            "has_report": True,
            "data": data
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ RugCheck API –¥–ª—è {token_address}: {e}")
        return {"error": str(e), "has_report": False}


def check_token_scam_risk(token_address: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ —Ä–∏—Å–∫ —Å–∫–∞–º–∞ —á–µ—Ä–µ–∑ DexScreener –∏ RugCheck.
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: –∫—Ä—É–ø–Ω—ã–π –¥–µ—Ä–∂–∞—Ç–µ–ª—å –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥.
    """
    try:
        url = f"https://api.dexscreener.com/tokens/v1/solana/{token_address}"
        response = requests.get(url, timeout=30)
        
        if response.status_code != 200 or not response.text.strip():
            return {
                "risk_level": "HIGH",
                "risk_reason": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç DexScreener",
                "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ",
                "has_pairs": False
            }
            
        try:
            data = response.json()
        except json.JSONDecodeError:
            return {
                "risk_level": "HIGH",
                "risk_reason": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç DexScreener",
                "message": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö",
                "has_pairs": False
            }

        if not data:
            return {
                "risk_level": "HIGH",
                "risk_reason": "–ù–µ—Ç –ø—É–ª–æ–≤ –Ω–∞ DEX",
                "message": "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö DEX",
                "has_pairs": False
            }
            
        first_pair = data[0]
        base_token = first_pair.get("baseToken", {})
        quote_token = first_pair.get("quoteToken", {})

        liquidity_usd = first_pair.get("liquidity", {}).get("usd", 0)
        volume_24h = first_pair.get("volume", {}).get("h24", 0)

        created_at = first_pair.get("pairCreatedAt", 0)
        if created_at:
            created_time = datetime.fromtimestamp(created_at / 1000, tz=timezone.utc)
            created_str = created_time.strftime("%Y-%m-%d %H:%M UTC")
        else: 
            created_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        risk_score = 0
        risk_reasons = []

        # --- –û–°–ù–û–í–ù–´–ï –§–ò–õ–¨–¢–†–´ –ò–ó DEXSCREENER ---
        if liquidity_usd < 10000:
            risk_score += 3
            risk_reasons.append(f"–ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (${liquidity_usd:,.0f})")

        if volume_24h < 50000:
            risk_score += 2
            risk_reasons.append(f"–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (${volume_24h:,.0f})")

        if not base_token.get("name") or not base_token.get("symbol"):
            risk_score += 4
            risk_reasons.append("–ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞")

        txns = first_pair.get("txns", {})
        h1_buys = txns.get("h1", {}).get("buys", 0)
        h1_sells = txns.get("h1", {}).get("sells", 0)
        if h1_sells > 0 and h1_buys > 0:
            buy_sell_ratio = h1_buys / h1_sells
            if buy_sell_ratio < 1.2:
                risk_score += 2
                risk_reasons.append("–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–¥–∞–∂–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

        socials = first_pair.get("info", {}).get("socials", [])
        if not socials:
            risk_score += 1
            risk_reasons.append("–ù–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")

        price_change_h1 = first_pair.get("priceChange", {}).get("h1", 0)
        if price_change_h1 > 300:
            risk_score += 2
            risk_reasons.append(f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (+{price_change_h1}% –∑–∞ —á–∞—Å)")

        # --- –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´ –ß–ï–†–ï–ó RUGCHECK ---
        rugcheck_result = check_token_via_rugcheck(token_address)
        
        if rugcheck_result.get("has_report"):
            report = rugcheck_result["data"]
            
            # 1. –§–∏–ª—å—Ç—Ä: –û–¥–∏–Ω –¥–µ—Ä–∂–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç –±–æ–ª–µ–µ —á–µ–º 20%
            top_holder_pct = 0
            if "topHolders" in report and report["topHolders"]:
                top_holder_pct = report["topHolders"][0].get("pct", 0)
                
            if top_holder_pct > 20:
                risk_score += 5
                risk_reasons.append(f"‚ö†Ô∏è –û–¥–∏–Ω –¥–µ—Ä–∂–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç {top_holder_pct:.2f}% –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ (>20%)")

            # 2. –§–∏–ª—å—Ç—Ä: RugCheck Score –Ω–∏–∂–µ 90
            score_normalised = report.get("score_normalised", 100)
            if score_normalised < 90:
                risk_score += 3
                risk_reasons.append(f"‚ùå –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ RugCheck ({score_normalised}/100)")
            elif score_normalised < 100:
                risk_reasons.append(f"üü° –†–µ–π—Ç–∏–Ω–≥ RugCheck ({score_normalised}/100)")

            # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
            for risk in report.get("risks", []):
                if risk.get("level") == "danger":
                    risk_score += 3
                    risk_reasons.append(f"üö® {risk['name']}: {risk.get('value', '')} - {risk['description']}")
                elif risk.get("level") == "warn":
                    risk_score += 1
                    risk_reasons.append(f"‚ö†Ô∏è {risk['name']}: {risk['description']}")

        elif "error" in rugcheck_result:
            risk_reasons.append(f"‚ö†Ô∏è RugCheck: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ({rugcheck_result['error']})")

        # --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–†–û–í–ù–Ø –†–ò–°–ö–ê ---
        if risk_score >= 8:
            risk_level = "HIGH"
            risk_message = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–∫–∞–º–∞"
        elif risk_score >= 4:
            risk_level = "MEDIUM"
            risk_message = "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ —Å–∫–∞–º–∞"
        else:
            risk_level = "LOW"
            risk_message = "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ —Å–∫–∞–º–∞"

        return {
            "risk_level": risk_level,
            "risk_reason": ", ".join(risk_reasons) if risk_reasons else "–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º",
            "message": risk_message,
            "has_pairs": True,
            "liquidity_usd": liquidity_usd,
            "volume_24h": volume_24h,
            "created_at": created_str,
            "token_name": base_token.get("name", "Unknown"),
            "token_symbol": base_token.get("symbol", "UNKNOWN"),
            "quote_token": quote_token.get("symbol", "SOL"),
            "dex_id": first_pair.get("dexId", "Unknown"),
            "price_change_h1": price_change_h1,
            "price_usd": first_pair.get("priceUsd", 0),
            "has_socials": len(socials) > 0,
            "rugcheck_result": rugcheck_result,
            "top_holder_pct": top_holder_pct if 'top_holder_pct' in locals() else 0
        }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_address} –Ω–∞ —Å–∫–∞–º: {e}")
        return {
            "risk_level": "UNKNOWN",
            "risk_reason": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω",
            "has_pairs": False
        }


def is_potential_scam(token_address: str, token_name: str, token_symbol: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Å–∫–∞–º–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∫–∞–º–æ–º.
    """
    logging.info(f'–Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ {token_address}')
    
    scam_info = check_token_scam_risk(token_address)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—É–ª–æ–≤, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –ò–õ–ò –æ–¥–∏–Ω –¥–µ—Ä–∂–∞—Ç–µ–ª—å >20%, –ò–õ–ò —Ä–µ–π—Ç–∏–Ω–≥ <90
    if not scam_info["has_pairs"] or scam_info["risk_level"] == "HIGH":
        return True

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    scam_indicators = [
        "test" in token_name.lower(),
        "test" in token_symbol.lower(),
        "fake" in token_name.lower(),
        "fake" in token_symbol.lower(),
        "scam" in token_name.lower(),
        "scam" in token_symbol.lower(),
        "honeypot" in token_name.lower(),
        "honeypot" in token_symbol.lower(),
        len(token_name) > 50,
        len(token_symbol) > 10,
    ]

    return any(scam_indicators)


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–¢–ü–†–ê–í–ö–ê –ê–ù–ê–õ–ò–ó–ê –í –ì–†–£–ü–ü–£ ---
async def send_token_analysis_to_group(bot: Bot, token_address: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é Telegram-–≥—Ä—É–ø–ø—É.
    """
    scam_info = check_token_scam_risk(token_address)

    risk_emoji = {"HIGH": "üî¥", "MEDIUM": "üü°", "LOW": "üü¢", "UNKNOWN": "üü†"}.get(scam_info["risk_level"], "‚ùì")

    message_text = (
        f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞</b>\n"
        f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{scam_info['token_name']}</b> ({scam_info['token_symbol']})\n"
        f"üîó –ê–¥—Ä–µ—Å: <code>{token_address}</code>\n"
        f"üïí <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞:</b> {scam_info['created_at']}\n"
        f"{risk_emoji} <b>–†–∏—Å–∫ —Å–∫–∞–º–∞:</b> {scam_info['message']}\n"
        f"üìä <b>–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å:</b> ${scam_info['liquidity_usd']:,.0f}\n"
        f"üìà <b>–û–±—ä–µ–º (24—á):</b> ${scam_info['volume_24h']:,.0f}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> ${float(scam_info['price_usd']):.8f} USD"
    )

    rugcheck = scam_info.get("rugcheck_result", {})
    if rugcheck.get("has_report"):
        report = rugcheck["data"]
        score = report.get("score_normalised", 0)
        message_text += f"\n‚≠ê <b>RugCheck Score:</b> {score}/100"
        
        top_holder = scam_info.get("top_holder_pct", 0)
        if top_holder > 0:
            color = "üî¥" if top_holder > 20 else "üü°"
            message_text += f"\nüëë <b>–¢–æ–ø –¥–µ—Ä–∂–∞—Ç–µ–ª—å:</b> {color} {top_holder:.2f}%"
    else:
        message_text += "\n‚≠ê <b>RugCheck:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç"

    message_text += f"\nüö´ <b>–§–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã:</b> {'‚ùå –ù–µ—Ç' if scam_info['risk_level'] == 'HIGH' else '‚úÖ –î–∞'}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ DexScreener", url=f"https://dexscreener.com/solana/{token_address}")],
        [InlineKeyboardButton(text="üîç Solscan", url=f"https://solscan.io/token/{token_address}")],
        [InlineKeyboardButton(text="üõ° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ RugCheck", url=f"https://rugcheck.xyz/tokens/{token_address}")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"refresh_{token_address}")]
    ])

    try:
        await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            message_thread_id=TOPIC_MESSAGE_THREAD_ID,
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ {token_address} –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ {token_address} –≤ –≥—Ä—É–ø–ø—É: {e}")
